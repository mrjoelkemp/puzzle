// Generated by CoffeeScript 1.3.1
(function() {

  this.Jigsaw = (function() {

    function Jigsaw() {
      var back_canvas, back_canvas_context, back_canvas_element, board, columns, neighbors, pieces, pieces_canvas, player, refresh_rate, rows, snapping_threshold, starting_id, video_element;
      player = $('#player');
      video_element = $('#player')[0];
      video_element.muted = true;
      back_canvas = $('#back-canvas');
      pieces_canvas = $("#pieces-canvas");
      rows = 2;
      columns = 3;
      starting_id = 1;
      board = Board.initBoard(rows, columns, starting_id);
      neighbors = Board.initNeighbors(rows, columns, board);
      pieces = PieceManager.initPieces(rows, columns, back_canvas, starting_id, neighbors);
      snapping_threshold = 40;
      this.setDraggingEvents(pieces, snapping_threshold);
      PieceManager.randomize(pieces);
      refresh_rate = 33;
      back_canvas_element = back_canvas[0];
      back_canvas_context = back_canvas_element.getContext('2d');
      RenderHelper.renderVideoToBackCanvas(video_element, back_canvas_context, refresh_rate);
      RenderHelper.renderBackCanvasToPieces(back_canvas_element, pieces, refresh_rate);
    }

    Jigsaw.prototype.setDraggingEvents = function(pieces, snapping_threshold) {
      var _this = this;
      return _.each(pieces, function(piece) {
        piece.draggable({
          helper: "original",
          snap: false,
          snapMode: "inner",
          stack: ".piece",
          snapTolerance: snapping_threshold
        });
        piece.bind("dragstart", function(e, ui) {
          return Piece.onDragStart(e, ui, piece);
        });
        piece.bind("drag", function(e, ui) {
          return Piece.onDrag(e, ui, piece, pieces);
        });
        return piece.bind("dragstop", function(e, ui) {
          return _this.onDragStop(piece, pieces, snapping_threshold);
        });
      });
    };

    Jigsaw.prototype.onDragStop = function(piece, pieces, snapping_threshold) {
      var have_neighbors_to_snap, neighbors_objects, snappable_neighbors, snappable_neighbors_ids,
        _this = this;
      Piece.updateDetailedPosition(piece);
      neighbors_objects = Piece.getNeighborObjects(piece, pieces);
      _.each(neighbors_objects, function(n) {
        return Piece.updateDetailedPosition(n);
      });
      snappable_neighbors_ids = Piece.findSnappableNeighbors(piece, neighbors_objects, snapping_threshold);
      snappable_neighbors = Piece.getNeighborObjectsFromIds(pieces, snappable_neighbors_ids);
      have_neighbors_to_snap = !_.isEmpty(snappable_neighbors);
      if (have_neighbors_to_snap) {
        Piece.propagateSnap(piece, snappable_neighbors, pieces);
        Piece.snapToNeighbors(piece, snappable_neighbors);
        return this.checkWinCondition(pieces);
      }
    };

    Jigsaw.prototype.checkWinCondition = function(pieces) {
      var g_id, game_won, group_members, num_pieces;
      num_pieces = _.size(pieces);
      g_id = pieces[1].data("group");
      group_members = _.filter(pieces, function(p) {
        return p.data("group") === g_id;
      });
      game_won = num_pieces === _.size(group_members);
      if (game_won) {
        return this.updateGameStatus("You Win!");
      }
    };

    Jigsaw.prototype.updateGameStatus = function(msg) {
      return $('#game-status').html("<span>" + msg + "</span>").addClass("win");
    };

    return Jigsaw;

  })();

}).call(this);
